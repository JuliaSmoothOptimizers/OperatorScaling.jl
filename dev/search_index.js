var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [OperatorScaling]","category":"page"},{"location":"reference/#OperatorScaling.equilibrate","page":"Reference","title":"OperatorScaling.equilibrate","text":"A_scaled, D1, D2 = equilibrate(A::AbstractMatrix{T}; A_transposed = false, kwargs...)\n\nPerforms the equilibration algorithm on the matrix A and returns the scaled matrix matrix A_scaled with its diagonal scaling factors D1 and D2.\n\nQ_scaled, D = equilibrate(Q::Symmetric{T}; kwargs...) where {T}\n\nPerforms the equilibration algorithm on the symmetric matrix Q and returns the scaled matrix matrix Q_scaled with its diagonal scaling factor D.\n\nSee equilibrate! for the keyword arguments.\n\n\n\n\n\n","category":"function"},{"location":"reference/#OperatorScaling.equilibrate!","page":"Reference","title":"OperatorScaling.equilibrate!","text":"equilibrate!(A::AbstractMatrix{T},\n             D1::Diagonal{T, S}, D2::Diagonal{T, S},\n             R_k::Diagonal{T, S}, C_k::Diagonal{T, S};\n             ϵ::T = T(1.0e-2), max_iter::Int = 100,\n             A_transposed::Bool = false) where {T, S <: AbstractVector{T}}\n\nPerforms the equilibration algorithm to scale A so that its rows and columns have a infinity norm of 1 with a tolerance ϵ. D1 and D2 are diagonal scaling factors of sizes size(A, 1) and size(A, 2) respectively. Once A is scaled, the identity D1 * A * D2 gives the unscaled matrix. R_k and C_k are diagonal matrices of sizes size(A, 1) and size(A, 2) respectively that should be pre-allocated. max_iter is the maximal number of iterations.\n\nIf A_transposed = true, then, once A is scaled, the identity D2 * A * D1 gives the unscaled matrix. When using A_transposed = true, D1 and D2 should have sizes size(A, 2) and size(A, 1).\n\nequilibrate!(Q::Symmetric{T}, D::Diagonal{T, S}, C_k::Diagonal{T, S};\n             ϵ::T = T(1.0e-2), max_iter::Int = 100) where {T, S <: AbstractVector{T}}\n\nPerforms the equilibration algorithm to scale the symmetric matrix Q so that its rows and columns have a infinity norm of 1 with a tolerance ϵ. D is a diagonal scaling factors of size size(Q, 1). Once Q is scaled, the identity D * Q * D gives the unscaled matrix. C_k is a diagonal matrix of size size(A, 1) that should be pre-allocated. max_iter is the maximal number of iterations.\n\nReference\n\nD. Ruiz, A Scaling Algorithm to Equilibrate Both Rows and Columns Norms in Matrices, RAL-TR-2001-034, 2001.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = OperatorScaling","category":"page"},{"location":"#Scaling","page":"Home","title":"Scaling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OperatorScaling.","category":"page"},{"location":"tutorial/#Equilibration-algorithm","page":"Tutorial","title":"Equilibration algorithm","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The equilibration algorithm scales a matrix so that its rows and columns have an infinite norm of 1.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using LinearAlgebra, SparseArrays\nusing OperatorScaling\nT = Float64\nϵ = 1.0e-4 # tolerance\nm, n = 7, 5\nA = sprand(T, m, n, 0.6)\nA_scaled, D1, D2 = equilibrate(A, ϵ = ϵ)\nnorm(D1 * A * D2 - A_scaled) ≤ sqrt(eps(T)) * norm(A)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Display of the input matrix A:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Display of the scaled matrix A_scaled:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A_scaled","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The in-place version uses storage diagonal matrices, and updates A, D1 and D2 in-place.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"D1, R_k = Diagonal(Vector{T}(undef, m)), Diagonal(Vector{T}(undef, m))\nD2, C_k = Diagonal(Vector{T}(undef, n)), Diagonal(Vector{T}(undef, n))\nA_scaled2 = copy(A)\nequilibrate!(A_scaled2, D1, D2, R_k, C_k, ϵ = ϵ)\n# A_scaled2, D1 and D2 are now updated\nnorm(D1 * A * D2 - A_scaled2) ≤ sqrt(eps(T)) * norm(A)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This packages also features an implementation for symmetric matrices:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A = sprand(Float64, m, m, 0.3)\nQ = Symmetric(tril(A + A'), :L)\nQ_scaled, D = equilibrate(Q, ϵ = ϵ)\nnorm(D * Q * D - Q_scaled) ≤ sqrt(eps(T)) * norm(Q)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Display of the input matrix Q:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Q","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Display of the scaled matrix Q_scaled:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Q_scaled","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Q_scaled2 = copy(Q)\n# D diagonal matrix and storage diagonal matrix (same size as Q)\nD, C_k = Diagonal(Vector{T}(undef, m)), Diagonal(Vector{T}(undef, m))\nequilibrate!(Q_scaled2, D, C_k, ϵ = ϵ)\nnorm(D * Q * D - Q_scaled2) ≤ sqrt(eps(T)) * norm(Q)","category":"page"}]
}
